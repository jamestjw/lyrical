// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockSession) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockSessionMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockSession)(nil).CloseConnection))
}

// GetVoiceConnections mocks base method.
func (m *MockSession) GetVoiceConnections() map[string]*discordgo.VoiceConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnections")
	ret0, _ := ret[0].(map[string]*discordgo.VoiceConnection)
	return ret0
}

// GetVoiceConnections indicates an expected call of GetVoiceConnections.
func (mr *MockSessionMockRecorder) GetVoiceConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnections", reflect.TypeOf((*MockSession)(nil).GetVoiceConnections))
}

// ListenAndServe mocks base method.
func (m *MockSession) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockSessionMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockSession)(nil).ListenAndServe))
}

// AddHandler mocks base method.
func (m *MockSession) AddHandler(arg0 interface{}) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", arg0)
	ret0, _ := ret[0].(func())
	return ret0
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockSessionMockRecorder) AddHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockSession)(nil).AddHandler), arg0)
}
