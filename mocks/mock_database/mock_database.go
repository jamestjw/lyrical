// Code generated by MockGen. DO NOT EDIT.
// Source: database/interfaces.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	database "github.com/jamestjw/lyrical/database"
	reflect "reflect"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// AddSongToDB mocks base method
func (m *MockDatastore) AddSongToDB(name, youtubeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSongToDB", name, youtubeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSongToDB indicates an expected call of AddSongToDB
func (mr *MockDatastoreMockRecorder) AddSongToDB(name, youtubeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSongToDB", reflect.TypeOf((*MockDatastore)(nil).AddSongToDB), name, youtubeID)
}

// SongExists mocks base method
func (m *MockDatastore) SongExists(youtubeID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SongExists", youtubeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SongExists indicates an expected call of SongExists
func (mr *MockDatastoreMockRecorder) SongExists(youtubeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SongExists", reflect.TypeOf((*MockDatastore)(nil).SongExists), youtubeID)
}

// GetRandomSongs mocks base method
func (m *MockDatastore) GetRandomSongs(limit int) []database.Song {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomSongs", limit)
	ret0, _ := ret[0].([]database.Song)
	return ret0
}

// GetRandomSongs indicates an expected call of GetRandomSongs
func (mr *MockDatastoreMockRecorder) GetRandomSongs(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomSongs", reflect.TypeOf((*MockDatastore)(nil).GetRandomSongs), limit)
}

// Close mocks base method
func (m *MockDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatastore)(nil).Close))
}
