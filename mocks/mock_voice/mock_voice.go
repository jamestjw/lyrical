// Code generated by MockGen. DO NOT EDIT.
// Source: voice/voice.go

// Package mock_voice is a generated GoMock package.
package mock_voice

import (
	gomock "github.com/golang/mock/gomock"
	playlist "github.com/jamestjw/lyrical/playlist"
	voice "github.com/jamestjw/lyrical/voice"
	reflect "reflect"
)

// MockConnectable is a mock of Connectable interface.
type MockConnectable struct {
	ctrl     *gomock.Controller
	recorder *MockConnectableMockRecorder
}

// MockConnectableMockRecorder is the mock recorder for MockConnectable.
type MockConnectableMockRecorder struct {
	mock *MockConnectable
}

// NewMockConnectable creates a new mock instance.
func NewMockConnectable(ctrl *gomock.Controller) *MockConnectable {
	mock := &MockConnectable{ctrl: ctrl}
	mock.recorder = &MockConnectableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectable) EXPECT() *MockConnectableMockRecorder {
	return m.recorder
}

// GetVoiceConnections mocks base method.
func (m *MockConnectable) GetVoiceConnections() map[string]voice.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnections")
	ret0, _ := ret[0].(map[string]voice.Connection)
	return ret0
}

// GetVoiceConnections indicates an expected call of GetVoiceConnections.
func (mr *MockConnectableMockRecorder) GetVoiceConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnections", reflect.TypeOf((*MockConnectable)(nil).GetVoiceConnections))
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockConnection) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockConnectionMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConnection)(nil).Disconnect))
}

// GetGuildID mocks base method.
func (m *MockConnection) GetGuildID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGuildID indicates an expected call of GetGuildID.
func (mr *MockConnectionMockRecorder) GetGuildID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildID", reflect.TypeOf((*MockConnection)(nil).GetGuildID))
}

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// RemoveNowPlaying mocks base method.
func (m *MockChannel) RemoveNowPlaying() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNowPlaying")
}

// RemoveNowPlaying indicates an expected call of RemoveNowPlaying.
func (mr *MockChannelMockRecorder) RemoveNowPlaying() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNowPlaying", reflect.TypeOf((*MockChannel)(nil).RemoveNowPlaying))
}

// GetNext mocks base method.
func (m *MockChannel) GetNext() *playlist.Song {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(*playlist.Song)
	return ret0
}

// GetNext indicates an expected call of GetNext.
func (mr *MockChannelMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockChannel)(nil).GetNext))
}

// SetNext mocks base method.
func (m *MockChannel) SetNext(arg0 *playlist.Song) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", arg0)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockChannelMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockChannel)(nil).SetNext), arg0)
}

// SetNowPlaying mocks base method.
func (m *MockChannel) SetNowPlaying(s *playlist.Song) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNowPlaying", s)
}

// SetNowPlaying indicates an expected call of SetNowPlaying.
func (mr *MockChannelMockRecorder) SetNowPlaying(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNowPlaying", reflect.TypeOf((*MockChannel)(nil).SetNowPlaying), s)
}

// GetAbortChannel mocks base method.
func (m *MockChannel) GetAbortChannel() chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbortChannel")
	ret0, _ := ret[0].(chan string)
	return ret0
}

// GetAbortChannel indicates an expected call of GetAbortChannel.
func (mr *MockChannelMockRecorder) GetAbortChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbortChannel", reflect.TypeOf((*MockChannel)(nil).GetAbortChannel))
}

// IsPlayingMusic mocks base method.
func (m *MockChannel) IsPlayingMusic() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPlayingMusic")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPlayingMusic indicates an expected call of IsPlayingMusic.
func (mr *MockChannelMockRecorder) IsPlayingMusic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPlayingMusic", reflect.TypeOf((*MockChannel)(nil).IsPlayingMusic))
}

// GetNowPlayingName mocks base method.
func (m *MockChannel) GetNowPlayingName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNowPlayingName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNowPlayingName indicates an expected call of GetNowPlayingName.
func (mr *MockChannelMockRecorder) GetNowPlayingName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNowPlayingName", reflect.TypeOf((*MockChannel)(nil).GetNowPlayingName))
}

// StopMusic mocks base method.
func (m *MockChannel) StopMusic() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopMusic")
}

// StopMusic indicates an expected call of StopMusic.
func (mr *MockChannelMockRecorder) StopMusic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopMusic", reflect.TypeOf((*MockChannel)(nil).StopMusic))
}
