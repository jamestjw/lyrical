// Code generated by MockGen. DO NOT EDIT.
// Source: voice/voice.go

// Package mock_voice is a generated GoMock package.
package mock_voice

import (
	gomock "github.com/golang/mock/gomock"
	voice "github.com/jamestjw/lyrical/voice"
	reflect "reflect"
)

// MockConnectable is a mock of Connectable interface.
type MockConnectable struct {
	ctrl     *gomock.Controller
	recorder *MockConnectableMockRecorder
}

// MockConnectableMockRecorder is the mock recorder for MockConnectable.
type MockConnectableMockRecorder struct {
	mock *MockConnectable
}

// NewMockConnectable creates a new mock instance.
func NewMockConnectable(ctrl *gomock.Controller) *MockConnectable {
	mock := &MockConnectable{ctrl: ctrl}
	mock.recorder = &MockConnectableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectable) EXPECT() *MockConnectableMockRecorder {
	return m.recorder
}

// GetVoiceConnections mocks base method.
func (m *MockConnectable) GetVoiceConnections() map[string]voice.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnections")
	ret0, _ := ret[0].(map[string]voice.Connection)
	return ret0
}

// GetVoiceConnections indicates an expected call of GetVoiceConnections.
func (mr *MockConnectableMockRecorder) GetVoiceConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnections", reflect.TypeOf((*MockConnectable)(nil).GetVoiceConnections))
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockConnection) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockConnectionMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConnection)(nil).Disconnect))
}

// GetGuildID mocks base method.
func (m *MockConnection) GetGuildID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGuildID indicates an expected call of GetGuildID.
func (mr *MockConnectionMockRecorder) GetGuildID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildID", reflect.TypeOf((*MockConnection)(nil).GetGuildID))
}
